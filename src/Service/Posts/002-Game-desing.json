[{"tag":"h2","inner":"Game desing"},{"tag":"md","inner":"Para realizar un videojuego que cumpla con las **espectativas** de un jugador, este debe **interpelarlo**.  "},{"tag":"md","inner":"A trav\u00e9s de estas otras disciplinas se ofrece al jugador informaci\u00f3n y experiencias a modo de **recompensas** o **castigos**."},{"tag":"h1","inner":"Que es un videojuego"},{"tag":"gdscript","inner":"# Typical lobby implementation; imagine this being in \/root\/lobby.\n\nextends Node\n\n# Connect all functions\n\nfunc _ready():\n    get_tree().connect(\"network_peer_connected\", self, \"_player_connected\")\n    get_tree().connect(\"network_peer_disconnected\", self, \"_player_disconnected\")\n    get_tree().connect(\"connected_to_server\", self, \"_connected_ok\")\n    get_tree().connect(\"connection_failed\", self, \"_connected_fail\")\n    get_tree().connect(\"server_disconnected\", self, \"_server_disconnected\")\n\n# Player info, associate ID to data\nvar player_info = {}\n# Info we send to other players\nvar my_info = { name = \"Johnson Magenta\", favorite_color = Color8(255, 0, 255) }\n\nfunc _player_connected(id):\n    # Called on both clients and server when a peer connects. Send my info to it.\n    rpc_id(id, \"register_player\", my_info)\n\nfunc _player_disconnected(id):\n    player_info.erase(id) # Erase player from info.\n\nfunc _connected_ok():\n    pass # Only called on clients, not server. Will go unused; not useful here.\n\nfunc _server_disconnected():\n    pass # Server kicked us; show error and abort.\n\nfunc _connected_fail():\n    pass # Could not even connect to server; abort.\n\nremote func register_player(info):\n    # Get the id of the RPC sender.\n    var id = get_tree().get_rpc_sender_id()\n    # Store the info\n    player_info[id] = info\n\n    # Call function to update lobby UI here","lineNumber":"1"}]